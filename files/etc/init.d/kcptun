#!/bin/sh /etc/rc.common
#
# Copyright 2016 Xingwang Liao <kuoruan@gmail.com>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

START=99
STOP=15

NAME=kcptun
LOG_FOLDER=/var/log/$NAME
CONFIG_FOLDER=/var/etc/$NAME
CLIENT_CONFIG=$CONFIG_FOLDER/client.json
SERVER_CONFIG=$CONFIG_FOLDER/server.json
CRON_FILE=/etc/crontabs/root
DEFAULT_USER=root

SERVICE_DAEMONIZE=1

ERROR=1
SUCCESS=0

is_ipv6_address() {
	if [ $# -eq 0 ]; then
		return $ERROR
	fi

	echo "$1" | grep -q ":"
}

write_client_config() {
	if [ $# -eq 0 ]; then
		return $ERROR
	fi
	local server server_port local_port key
	local crypt mode conn autoexpire mtu sndwnd rcvwnd
	local datashard parityshard dscp nocomp sockbuf keepalive
	local nodelay interval resend nc acknodelay

	config_get server      $1 server
	config_get server_port $1 server_port
	config_get local_host  $1 local_host
	config_get local_port  $1 local_port
	config_get key         $1 key
	config_get crypt       $1 crypt
	config_get mode        $1 mode
	config_get conn        $1 conn
	config_get autoexpire  $1 autoexpire
	config_get mtu         $1 mtu
	config_get sndwnd      $1 sndwnd
	config_get rcvwnd      $1 rcvwnd
	config_get datashard   $1 datashard
	config_get parityshard $1 parityshard
	config_get dscp        $1 dscp
	config_get nocomp      $1 nocomp
	config_get sockbuf     $1 sockbuf
	config_get keepalive   $1 keepalive

	if [ "$mode"x = "manualx" ]; then
		config_get nodelay    $1 nodelay
		config_get interval   $1 interval
		config_get resend     $1 resend
		config_get nc         $1 nc
		config_get acknodelay $1 acknodelay
	fi

	[ -z "$server" -o -z "$server_port" -o -z "$local_port" ] && return $ERROR

	add_iptables_rule $local_port "client"

	is_ipv6_address "$server" && server="[${server}]"
	is_ipv6_address "$local_host" && local_host="[${local_host}]"

	echo -n "{" >$CLIENT_CONFIG
	printf '\n  "localaddr": "%s:%s"' "$local_host" "$local_port" >>$CLIENT_CONFIG
	printf ',\n  "remoteaddr": "%s:%s"' "$server" "$server_port" >>$CLIENT_CONFIG
	[ -n "$key" ] && \
		printf ',\n  "key": "%s"' "$key" >>$CLIENT_CONFIG
	[ -n "$crypt" ] && \
		printf ',\n  "crypt": "%s"' "$crypt" >>$CLIENT_CONFIG
	[ -n "$mode" ] && \
		printf ',\n  "mode": "%s"' "$mode" >>$CLIENT_CONFIG
	[ -n "$conn" ] && \
		printf ',\n  "conn": %d' $conn >>$CLIENT_CONFIG
	[ -n "$autoexpire" ] && \
		printf ',\n  "autoexpire": %d' $autoexpire >>$CLIENT_CONFIG
	[ -n "$mtu" ] && \
		printf ',\n  "mtu": %d' "$mtu" >>$CLIENT_CONFIG
	[ -n "$sndwnd" ] && \
		printf ',\n  "sndwnd": %d' "$sndwnd" >>$CLIENT_CONFIG
	[ -n "$rcvwnd" ] && \
		printf ',\n  "rcvwnd": %d' "$rcvwnd" >>$CLIENT_CONFIG
	[ -n "$datashard" ] && \
		printf ',\n  "datashard": %d' "$datashard" >>$CLIENT_CONFIG
	[ -n "$parityshard" ] && \
		printf ',\n  "parityshard": %d' "$parityshard" >>$CLIENT_CONFIG
	[ -n "$dscp" ] && \
		printf ',\n  "dscp": %d' "$dscp" >>$CLIENT_CONFIG
	[ -n "$nocomp" ] && \
		printf ',\n  "nocomp": %s' "$nocomp" >>$CLIENT_CONFIG
	[ -n "$nodelay" ] && \
		printf ',\n  "nodelay": %d' "$nodelay" >>$CLIENT_CONFIG
	[ -n "$interval" ] && \
		printf ',\n  "interval": %d' "$interval" >>$CLIENT_CONFIG
	[ -n "$resend" ] && \
		printf ',\n  "resend": %d' "$resend" >>$CLIENT_CONFIG
	[ -n "$nc" ] && \
		printf ',\n  "nc": %d' "$nc" >>$CLIENT_CONFIG
	[ -n "$acknodelay" ] && \
		printf ',\n  "acknodelay": %s' "$acknodelay" >>$CLIENT_CONFIG
	[ -n "$sockbuf" ] && \
		printf ',\n  "sockbuf": %d' "$sockbuf" >>$CLIENT_CONFIG
	[ -n "$keepalive" ] && \
		printf ',\n  "keepalive": %d' "$keepalive" >>$CLIENT_CONFIG
	[ -n "$client_log" ] && \
		printf ',\n  "log": "%s"' "$client_log" >>$CLIENT_CONFIG
	echo -e "\n}" >>$CLIENT_CONFIG

	return $?
}

write_server_config() {
	if [ $# -eq 0 ]; then
		return $ERROR
	fi
	local target target_port listen_port key
	local crypt mode mtu sndwnd rcvwnd
	local datashard parityshard dscp nocomp sockbuf keepalive
	local nodelay interval resend nc acknodelay

	config_get target      $1 target
	config_get target_port $1 target_port
	config_get listen_host $1 listen_host
	config_get listen_port $1 listen_port
	config_get key         $1 key
	config_get crypt       $1 crypt
	config_get mode        $1 mode
	config_get mtu         $1 mtu
	config_get sndwnd      $1 sndwnd
	config_get rcvwnd      $1 rcvwnd
	config_get datashard   $1 datashard
	config_get parityshard $1 parityshard
	config_get dscp        $1 dscp
	config_get nocomp      $1 nocomp
	config_get sockbuf     $1 sockbuf
	config_get keepalive   $1 keepalive

	if [ "$mode" = "manual" ]; then
		config_get nodelay    $1 nodelay
		config_get interval   $1 interval
		config_get resend     $1 resend
		config_get nc         $1 nc
		config_get acknodelay $1 acknodelay
	fi

	[ -z "$target" -o -z "$target_port" -o -z "$listen_port" ] && return $ERROR

	add_iptables_rule $listen_port "server"

	is_ipv6_address "$target" && target="[${target}]"
	is_ipv6_address "$listen_host" && listen_host="[${listen_host}]"

	echo -n "{" >$SERVER_CONFIG
	printf '\n  "listen": "%s:%s"' "$listen_host" "$listen_port" >>$SERVER_CONFIG
	printf ',\n  "target": "%s:%s"' "$target" "$target_port" >>$SERVER_CONFIG
	[ -n "$key" ] && \
		printf ',\n  "key": "%s"' "$key" >>$SERVER_CONFIG
	[ -n "$crypt" ] && \
		printf ',\n  "crypt": "%s"' "$crypt" >>$SERVER_CONFIG
	[ -n "$mode" ] && \
		printf ',\n  "mode": "%s"' "$mode" >>$SERVER_CONFIG
	[ -n "$mtu" ] && \
		printf ',\n  "mtu": %d' "$mtu" >>$SERVER_CONFIG
	[ -n "$sndwnd" ] && \
		printf ',\n  "sndwnd": %d' "$sndwnd" >>$SERVER_CONFIG
	[ -n "$rcvwnd" ] && \
		printf ',\n  "rcvwnd": %d' "$rcvwnd" >>$SERVER_CONFIG
	[ -n "$datashard" ] && \
		printf ',\n  "datashard": %d' "$datashard" >>$SERVER_CONFIG
	[ -n "$parityshard" ] && \
		printf ',\n  "parityshard": %d' "$parityshard" >>$SERVER_CONFIG
	[ -n "$dscp" ] && \
		printf ',\n  "dscp": %d' "$dscp" >>$SERVER_CONFIG
	[ -n "$nocomp" ] && \
		printf ',\n  "nocomp": %s' $nocomp >>$SERVER_CONFIG
	[ -n "$nodelay" ] && \
		printf ',\n  "nodelay": %d' "$nodelay" >>$SERVER_CONFIG
	[ -n "$interval" ] && \
		printf ',\n  "interval": %d' "$interval" >>$SERVER_CONFIG
	[ -n "$resend" ] && \
		printf ',\n  "resend": %d' "$resend" >>$SERVER_CONFIG
	[ -n "$nc" ] && \
		printf ',\n  "nc": %d' "$nc" >>$SERVER_CONFIG
	[ -n "$acknodelay" ] && \
		printf ',\n  "acknodelay": %s' "$acknodelay" >>$SERVER_CONFIG
	[ -n "$sockbuf" ] && \
		printf ',\n  "sockbuf": %d' "$sockbuf" >>$SERVER_CONFIG
	[ -n "$keepalive" ] && \
		printf ',\n  "keepalive": %d' "$keepalive" >>$SERVER_CONFIG
	[ -n "$server_log" ] && \
		printf ',\n  "log": "%s"' "$server_log" >>$SERVER_CONFIG
	echo -e "\n}" >>$SERVER_CONFIG

	return $?
}

load_settings() {
	config_get_bool enable_server       $1 enable_server       0
	config_get_bool enable_logging      $1 enable_logging      0
	config_get_bool enable_monitor      $1 enable_monitor      0
	config_get_bool enable_auto_restart $1 enable_auto_restart 0

	config_get kcptun_client $1 kcptun_client
	config_get kcptun_server $1 kcptun_server
	config_get client_file   $1 client_file
	config_get server_file   $1 server_file
	config_get daemon_user   $1 daemon_user
	config_get log_folder    $1 log_folder

	[ -z "$daemon_user" ] && daemon_user=$DEFAULT_USER
}

create_folder() {
	[ -d "$CONFIG_FOLDER" ] || mkdir -p "$CONFIG_FOLDER"

	if [ "$enable_logging" -eq 1 ]; then

		local log_folder=${log_folder:-$LOG_FOLDER}
		[ -d "$log_folder" ] || mkdir -p "$log_folder"

		server_log="$log_folder/kcptun-server.log"
		client_log="$log_folder/kcptun-client.log"

		chown -R "$daemon_user" "$log_folder"
	fi
}

setup_iptables() {
	iptables -N "$NAME" >/dev/null 2>&1
	iptables -F "$NAME" >/dev/null 2>&1

	iptables -C OUTPUT -j "$NAME" >/dev/null 2>&1 || \
		iptables -A OUTPUT -j "$NAME" >/dev/null 2>&1
	iptables -C INPUT -j "$NAME" >/dev/null 2>&1 || \
		iptables -A INPUT -j "$NAME" >/dev/null 2>&1
}

setup_cron() {
	[ -s "$CRON_FILE" ] || echo >"$CRON_FILE"

	if [ "$enable_monitor" -eq 1 ]; then
		if ! grep -q '/usr/bin/kcptun_monitor' "$CRON_FILE"; then
			sed -i '$a */1 * * * * /usr/bin/kcptun_monitor' "$CRON_FILE"
		fi
	else
		sed -i '/^\*\/1 \* \* \* \* \/usr\/bin\/kcptun_monitor$/d' "$CRON_FILE"
	fi

	if [ "$enable_auto_restart" -eq 1 ]; then
		if ! grep -q '/etc/init.d/kcptun' "$CRON_FILE"; then
			sed -i '$a 0 5 * * * /etc/init.d/kcptun restart' "$CRON_FILE"
		fi
	else
		sed -i '/^0 5 \* \* \* \/etc\/init.d\/kcptun restart$/d' "$CRON_FILE"
	fi

	if [ "$enable_monitor" -eq 1 -o "$enable_auto_restart" -eq 1 ]; then
		if ! ps -w | grep -v grep | grep -q crond; then
			/etc/init.d/cron restart
		fi
	fi
}

add_iptables_rule() {
	if [ $# != 2 ]; then
		return $ERROR
	fi

	local port=$1
	local comment=$2

	iptables -A "$NAME" -p udp --dport "$port" -m comment --comment "$comment" -j ACCEPT
	iptables -A "$NAME" -p tcp --dport "$port" -m comment --comment "$comment" -j ACCEPT
}

start_instance() {
	load_settings $1
	create_folder

	setup_iptables
	setup_cron

	if [ "$kcptun_client"x != "nilx"  ]; then
		write_client_config $kcptun_client
		if [ $? -eq 0 ]; then
			[ -f "$client_file" ] || return $ERROR
			[ -x "$client_file" ] || chmod 755 "$client_file"

			SERVICE_UID="$daemon_user" \
				service_start "$client_file" -c "$CLIENT_CONFIG"

			logger -t "$NAME" "Client started."
		fi
	fi

	if [ "$enable_server" -eq 1 -a "$kcptun_server"x != "nilx" ]; then
		write_server_config $kcptun_server
		if [ $? -eq 0 ]; then
			[ -f "$server_file" ] || return $ERROR
			[ -x "$server_file" ] || chmod 755 "$server_file"

			SERVICE_UID="$daemon_user" \
				service_start "$server_file" -c "$SERVER_CONFIG"

			logger -t "$NAME" "Server started."
		fi
	fi
}

stop_instance() {
	load_settings $1

	if [ -f "$client_file" ]; then
		service_stop "$client_file"
	fi

	if [ "$enable_server" -eq 1 -a -f "$server_file" ]; then
		service_stop "$server_file"
	fi
}

start() {
	echo "Starting ${NAME}..."
	config_load $NAME
	config_foreach start_instance 'general'
}

stop() {
	echo "Stopping ${NAME}..."
	config_load $NAME
	config_foreach stop_instance 'general'
}

reload() {
	echo "Reloading ${NAME}..."
	stop
	start
}
